// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserHTTPServer interface {
	CheckUserOK(context.Context, *CheckUserOKRequest) (*CheckUserOKReply, error)
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressReply, error)
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressReply, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ListAddress(context.Context, *ListAddressRequest) (*ListAddressReply, error)
	LoginByUsername(context.Context, *LoginByUsernameRequest) (*LoginUserReply, error)
	LoginByVerifyCode(context.Context, *LoginByVerifyCodeRequest) (*LoginUserReply, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserReply, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user", _User_RegisterUser0_HTTP_Handler(srv))
	r.PUT("v1/user", _User_LoginByUsername0_HTTP_Handler(srv))
	r.PUT("v1/user/login/verifyCode", _User_LoginByVerifyCode0_HTTP_Handler(srv))
	r.GET("/v1/user", _User_GetUser0_HTTP_Handler(srv))
	r.GET("/v1/user/ok", _User_CheckUserOK0_HTTP_Handler(srv))
	r.GET("/v1/address", _User_ListAddress0_HTTP_Handler(srv))
	r.POST("/v1/address", _User_CreateAddress0_HTTP_Handler(srv))
	r.GET("/v1/address/{id}", _User_GetAddress0_HTTP_Handler(srv))
	r.PUT("/v1/address", _User_UpdateAddress0_HTTP_Handler(srv))
	r.DELETE("/v1/address/{id}", _User_DeleteAddress0_HTTP_Handler(srv))
}

func _User_RegisterUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/RegisterUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterUser(ctx, req.(*RegisterUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_LoginByUsername0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByUsernameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/LoginByUsername")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByUsername(ctx, req.(*LoginByUsernameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_LoginByVerifyCode0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByVerifyCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/LoginByVerifyCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByVerifyCode(ctx, req.(*LoginByVerifyCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/GetUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_CheckUserOK0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckUserOKRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/CheckUserOK")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckUserOK(ctx, req.(*CheckUserOKRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckUserOKReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListAddress0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/ListAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAddress(ctx, req.(*ListAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAddressReply)
		return ctx.Result(200, reply)
	}
}

func _User_CreateAddress0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/CreateAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAddress(ctx, req.(*CreateAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetAddress0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/GetAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateAddress0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/UpdateAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAddress(ctx, req.(*UpdateAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAddressReply)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteAddress0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAddressRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.user.v1.User/DeleteAddress")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAddress(ctx, req.(*DeleteAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAddressReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CheckUserOK(ctx context.Context, req *CheckUserOKRequest, opts ...http.CallOption) (rsp *CheckUserOKReply, err error)
	CreateAddress(ctx context.Context, req *CreateAddressRequest, opts ...http.CallOption) (rsp *CreateAddressReply, err error)
	DeleteAddress(ctx context.Context, req *DeleteAddressRequest, opts ...http.CallOption) (rsp *DeleteAddressReply, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *GetAddressReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListAddress(ctx context.Context, req *ListAddressRequest, opts ...http.CallOption) (rsp *ListAddressReply, err error)
	LoginByUsername(ctx context.Context, req *LoginByUsernameRequest, opts ...http.CallOption) (rsp *LoginUserReply, err error)
	LoginByVerifyCode(ctx context.Context, req *LoginByVerifyCodeRequest, opts ...http.CallOption) (rsp *LoginUserReply, err error)
	RegisterUser(ctx context.Context, req *RegisterUserRequest, opts ...http.CallOption) (rsp *RegisterUserReply, err error)
	UpdateAddress(ctx context.Context, req *UpdateAddressRequest, opts ...http.CallOption) (rsp *UpdateAddressReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CheckUserOK(ctx context.Context, in *CheckUserOKRequest, opts ...http.CallOption) (*CheckUserOKReply, error) {
	var out CheckUserOKReply
	pattern := "/v1/user/ok"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.v1.User/CheckUserOK"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...http.CallOption) (*CreateAddressReply, error) {
	var out CreateAddressReply
	pattern := "/v1/address"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.User/CreateAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...http.CallOption) (*DeleteAddressReply, error) {
	var out DeleteAddressReply
	pattern := "/v1/address/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.v1.User/DeleteAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*GetAddressReply, error) {
	var out GetAddressReply
	pattern := "/v1/address/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.v1.User/GetAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.v1.User/GetUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) ListAddress(ctx context.Context, in *ListAddressRequest, opts ...http.CallOption) (*ListAddressReply, error) {
	var out ListAddressReply
	pattern := "/v1/address"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.user.v1.User/ListAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) LoginByUsername(ctx context.Context, in *LoginByUsernameRequest, opts ...http.CallOption) (*LoginUserReply, error) {
	var out LoginUserReply
	pattern := "v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.User/LoginByUsername"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) LoginByVerifyCode(ctx context.Context, in *LoginByVerifyCodeRequest, opts ...http.CallOption) (*LoginUserReply, error) {
	var out LoginUserReply
	pattern := "v1/user/login/verifyCode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.User/LoginByVerifyCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...http.CallOption) (*RegisterUserReply, error) {
	var out RegisterUserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.User/RegisterUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...http.CallOption) (*UpdateAddressReply, error) {
	var out UpdateAddressReply
	pattern := "/v1/address"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.user.v1.User/UpdateAddress"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
