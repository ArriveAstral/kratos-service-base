// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CouponHTTPServer interface {
	ListCoupon(context.Context, *ListCouponRequest) (*ListCouponReply, error)
	ListUserCoupon(context.Context, *ListUserCouponRequest) (*ListUserCouponReply, error)
	RushCollectCoupon(context.Context, *RushCollectCouponRequest) (*RushCollectCouponReply, error)
}

func RegisterCouponHTTPServer(s *http.Server, srv CouponHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/coupon", _Coupon_ListCoupon0_HTTP_Handler(srv))
	r.POST("/v1/coupon", _Coupon_RushCollectCoupon0_HTTP_Handler(srv))
	r.GET("v1/coupon/user", _Coupon_ListUserCoupon0_HTTP_Handler(srv))
}

func _Coupon_ListCoupon0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coupon.v1.Coupon/ListCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoupon(ctx, req.(*ListCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCouponReply)
		return ctx.Result(200, reply)
	}
}

func _Coupon_RushCollectCoupon0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RushCollectCouponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coupon.v1.Coupon/RushCollectCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RushCollectCoupon(ctx, req.(*RushCollectCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RushCollectCouponReply)
		return ctx.Result(200, reply)
	}
}

func _Coupon_ListUserCoupon0_HTTP_Handler(srv CouponHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coupon.v1.Coupon/ListUserCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserCoupon(ctx, req.(*ListUserCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCouponReply)
		return ctx.Result(200, reply)
	}
}

type CouponHTTPClient interface {
	ListCoupon(ctx context.Context, req *ListCouponRequest, opts ...http.CallOption) (rsp *ListCouponReply, err error)
	ListUserCoupon(ctx context.Context, req *ListUserCouponRequest, opts ...http.CallOption) (rsp *ListUserCouponReply, err error)
	RushCollectCoupon(ctx context.Context, req *RushCollectCouponRequest, opts ...http.CallOption) (rsp *RushCollectCouponReply, err error)
}

type CouponHTTPClientImpl struct {
	cc *http.Client
}

func NewCouponHTTPClient(client *http.Client) CouponHTTPClient {
	return &CouponHTTPClientImpl{client}
}

func (c *CouponHTTPClientImpl) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...http.CallOption) (*ListCouponReply, error) {
	var out ListCouponReply
	pattern := "/v1/coupon"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.coupon.v1.Coupon/ListCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CouponHTTPClientImpl) ListUserCoupon(ctx context.Context, in *ListUserCouponRequest, opts ...http.CallOption) (*ListUserCouponReply, error) {
	var out ListUserCouponReply
	pattern := "v1/coupon/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.coupon.v1.Coupon/ListUserCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CouponHTTPClientImpl) RushCollectCoupon(ctx context.Context, in *RushCollectCouponRequest, opts ...http.CallOption) (*RushCollectCouponReply, error) {
	var out RushCollectCouponReply
	pattern := "/v1/coupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.coupon.v1.Coupon/RushCollectCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
